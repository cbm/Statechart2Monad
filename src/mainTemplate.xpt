«IMPORT IAC»
«EXTENSION statechart2Monad::NodeHelper»

«DEFINE model FOR List»
	«EXPAND model FOR this.last()»					
«ENDDEFINE»


«DEFINE model FOR IAC::Model»
	«FILE ClassName(name)+".h"-»
#ifndef «ClassName(name)»_h_
#define «ClassName(name)»_h_ 1
		
#include "architecture/statechartEngine/Statechart.h"
#include "architecture/statechartEngine/StartState.h"
#include "architecture/statechartEngine/EndState.h"
#include "architecture/statechartEngine/OrState.h"
#include "architecture/statechartEngine/AndState.h"
#include "architecture/statechartEngine/BasicState.h"
#include "architecture/statechartEngine/Transitions/TransitionSegment.h"
#include "architecture/statechartEngine/Transitions/ConditionConnector.h"

#include "architecture/statechartWrapper.h"

class «ClassName(name)+"Statechart"» : public StatechartWrapper {

	public:
	
		«ClassName(name)+"Statechart"» (Narukom* com);
		
		~«ClassName(name)+"Statechart"» ();
		
		void Start ();
		
		void Stop ();
		
	private:
	
		typedef std::vector<statechart_engine::State*> StateCont;
		typedef std::vector<statechart_engine::TransitionSegmentBase*> TransitionCont;
		
		StateCont _states;
		TransitionCont _transitions;
		
		typedef std::vector<IActivity*> ActCont;		
		ActCont _activities;
		
		typedef std::vector<statechart_engine::IEvent*> EventCont;
		typedef std::vector<statechart_engine::ICondition*> CondCont;
		typedef std::vector<statechart_engine::IAction*> ActionCont;
		
		EventCont _events;
		CondCont _conditions;
		ActionCont _actions;
		
		statechart_engine::Statechart* _statechart;
			
};

#endif // «ClassName(name)»_h_
	«ENDFILE»
	
	
	«EXPAND src::Transition::TransitionHeaders FOREACH transitions»
	
	
	«FILE ClassName(name)+".cpp"-»
#include "«ClassName(name)+".h"»"
#include "transitionHeaders.h"
		
using namespace statechart_engine;

namespace {
	StatechartRegistrar<«ClassName(name)+"Statechart"»>::Type temp("«ClassName(name)+"Statechart"»");
}
	
«ClassName(name)+"Statechart"»::«ClassName(name)+"Statechart"»(Narukom* com) {

	«EXPAND node FOREACH SortNodes(nodes)»	
	«EXPAND src::Transition::Transition FOREACH transitions»
	
}

«ClassName(name)+"Statechart"»::~«ClassName(name)+"Statechart"»() {
    for ( StateCont::iterator it = _states.begin(); it != _states.end(); it++ )
    	delete (*it);
    for ( TransitionCont::iterator it = _transitions.begin(); it != _transitions.end(); it++ )
    	delete (*it);
    for ( ActCont::iterator it = _activities.begin(); it != _activities.end(); it++ )
    	delete (*it);
    for ( EventCont::iterator it = _events.begin(); it != _events.end(); it++ )
    	delete (*it);
   	for ( CondCont::iterator it = _conditions.begin(); it != _conditions.end(); it++ )
    	delete (*it);
    for ( ActionCont::iterator it = _actions.begin(); it != _actions.end(); it++ )
    	delete (*it);
}

void «ClassName(name)+"Statechart"»::Start () {
	_statechart->Start();
}

void «ClassName(name)+"Statechart"»::Stop () {
	_statechart->Stop();
}

	«ENDFILE»
	«FILE "CMakeLists.txt"»
message ( STATUS "" )
message ( STATUS " _..::: Configuring «ClassName(name)» :::.._ " )
message ( STATUS "" )

add_library ( «ClassName(name)» ${LibBuildType}
        «ClassName(name)+".cpp"» )        

target_link_libraries ( «ClassName(name)» statechartEngine narukom )

install ( TARGETS «ClassName(name)»
RUNTIME DESTINATION   bin
LIBRARY DESTINATION   lib
ARCHIVE DESTINATION   lib/static )

set ( StatechartLibraries ${StatechartLibraries} «ClassName(name)» PARENT_SCOPE )
	«ENDFILE»
«ENDDEFINE»



«DEFINE node FOR IAC::Node»
			«IF label.compareTo("0")==0 -»
	_statechart = new Statechart ( "«NodeNameInst(name)»", com );
	Statechart* «NodeNameInst(label)» = _statechart;
	_states.push_back( «NodeNameInst(label)» );
			«ELSEIF type.compareTo("START")==0 -»
	StartState* «NodeNameInst(label)» = new StartState ( "«NodeNameInst(name)»", «ParentNodeNameInst(label)» ); //Name:«name»
	_states.push_back( «NodeNameInst(label)» );
			«ELSEIF type.compareTo("END")==0 -»
	EndState* «NodeNameInst(label)» = new EndState ( "«NodeNameInst(name)»", «ParentNodeNameInst(label)» ); //Name:«name»
	_states.push_back( «NodeNameInst(label)» );
			«ELSEIF type.compareTo("OR")==0 -»
	OrState* «NodeNameInst(label)» = new OrState ( "«NodeNameInst(name)»", «ParentNodeNameInst(label)» );	//Name:«NameFilter(name)»
	_states.push_back( «NodeNameInst(label)» );
			«ELSEIF type.compareTo("AND")==0 -»
	AndState* «NodeNameInst(label)» = new AndState ( "«NodeNameInst(name)»", «ParentNodeNameInst(label)» ); //Name:«name»
	_states.push_back( «NodeNameInst(label)» );
			«ELSEIF type.compareTo("CONDITION")==0 -»
	ConditionConnector* «NodeNameInst(label)»  = new ConditionConnector ( "«NodeNameInst(name)»", «ParentNodeNameInst(label)» ); //Name:«name»
	_states.push_back( «NodeNameInst(label)» );
			«ELSEIF type.compareTo("BASIC")==0 -»
			«EXPAND src::Activity::Activity»
	IActivity* «ActivityNameInst(label)» = ActivityFactory::Instance()->CreateObject( "«ClassName(name)»" );
	_activities.push_back( «ActivityNameInst(label)» );			
	BasicState* «NodeNameInst(label)» = new BasicState( "«NodeNameInst(name)»", «ParentNodeNameInst(label)», «ActivityNameInst(label)» ); //Name:«name»
	_states.push_back( «NodeNameInst(label)» );
			«ELSE-»
	NODE:«label»: Error on node type! 
	Available types are "START", "END", "OR", "AND", "CONDITION" and "BASIC"				  
			«ENDIF-»
«ENDDEFINE»
